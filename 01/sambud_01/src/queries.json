[
  {
    "name": "CONTACT_POSITIVES",
    "displayName": "Contacts last 5 days",
    "description": "Find all the contacts a Positive Person made during the last 5 days, returning Names, Dates and Days Passed",
    "cypher": "MATCH (p1:Person)-[c:CONTACTS]-(p2:Person) WITH p1, p2, p1.Last_Confirm as positiveness_date, c.Date as contact_date  WHERE positiveness_date > contact_date and      positiveness_date < contact_date + duration({days: 5}) and p1.Positive = True RETURN DISTINCT p1.First_Name + \" \" + p1.Last_Name as Positive, p2.First_Name + \" \" + p2.Last_Name as Contacted, positiveness_date, contact_date, duration.inDays(contact_date, positiveness_date).days  as days_passed LIMIT 25",
    "view": "table"
  },
  {
    "name": "POSITIVE_VACCINE_RATIO",
    "displayName": "Ratio of positive vaccinated",
    "description": "Find how many positive vaccinated people have a determined type of Vaccine, returning Positive to Total ratio",
    "cypher": "MATCH (m)-[:REGISTERED]->(c:Covid_Vaccines) WITH c.Type as Type, count(*) as TotalNumber ORDER BY c.Type MATCH (p:Person)-[:HAS]-(m:Medical_Record), (m)-[:REGISTERED]->(c:Covid_Vaccines) WHERE p.Positive = True and Type = c.Type RETURN  Type, count(*) as Positives, TotalNumber, round(ToFloat(count(*)) / ToFloat(TotalNumber)*100, 2) + \"%\" as Percent ORDER BY Percent DESC",
    "view": "table"
  },
  {
    "name": "PLACES_POSITIVE",
    "displayName": "Places visited longer 50 minutes",
    "description": "Find which places and rooms have been visited by positive person in the last 5 days for a duration time longer than 50 minutes",
    "cypher": "MATCH (p1:Person)-[v1:VISITS]->(pl:Place) WHERE p1.Last_Confirm > v1.Date and p1.Last_Confirm < v1.Date + duration({days:5}) and p1.Positive = True and v1.Duration > time({hour:0,minute:50}) RETURN DISTINCT p1.CIF as CIF, p1.First_Name as Name, pl.Code as Place, pl.Room as Room, v1.Date as Date,p1.Last_Confirm as Positiveness_Date ORDER BY p1.CIF UNION MATCH (p1:Person)-[v1:VISITS]->(r:Rooms) WHERE p1.Last_Confirm > v1.Date and p1.Last_Confirm < v1.Date + duration({days:5}) and p1.Positive = True and v1.Duration > time({hour:0,minute:50}) RETURN DISTINCT p1.CIF as CIF, p1.First_Name as Name, r.Code as Place, r.Name as Room, v1.Date as Date, p1.Last_Confirm as Positiveness_Date ORDER BY p1.CIF",
    "view": "table"
  },
  {
    "name": "CONTACT_NODES",
    "displayName": "Connections from positive as nodes",
    "description": "Find all the connections a positive person had, returning nodes for graphical representation",
    "cypher": "match(p:Person) with p, p.Last_Confirm as P_Date, duration({days:50}) as TimeElapsed match  relation_1 = (p)-[v1:VISITS]->(pl:Place)<-[v3:VISITS]-(:Person) where  (P_Date > v1.Date and P_Date < v1.Date + TimeElapsed) and  (P_Date > v3.Date and P_Date < v3.Date + TimeElapsed) and (v1.Date >  v3.Date and v1.Date  < v3.Date + TimeElapsed) with p, P_Date, relation_1, TimeElapsed match relation_2 = (p)-[v2:VISITS]->(r:Rooms)<-[v4:VISITS]-(:Person) where (P_Date > v2.Date and P_Date < v2.Date + TimeElapsed) and  (P_Date > v4.Date and P_Date < v4.Date + TimeElapsed) and (v2.Date >  v4.Date and v2.Date  < v4.Date + TimeElapsed) with p, P_Date, relation_1, relation_2, TimeElapsed match relation_3 = (p)-[c:CONTACTS]->(:Person) where (P_Date > c.Date and P_Date < c.Date + TimeElapsed) with p, P_Date, relation_1, relation_2, relation_3, TimeElapsed match relation_4 = (p)-[:LIVES]->(:Person) return relation_1, relation_2, relation_3, relation_4 limit 20",
    "view": "graph"
  },
  {
    "name": "FAMILY_CONTACT_15DAYS",
    "displayName": "Family of contacts in 15 days",
    "description": "Track all the people who were in contact with a positive in the last 15 days from his confirmation and find all their familiars",
    "cypher": "match rel_1=(p1:Person{Positive:true})-[c:CONTACTS]-(p2:Person) where p1.Last_Confirm >= c.Date and p1.Last_Confirm <= c.Date + duration({days: 15}) match rel_2=(p2)-[:LIVES*]-(p4:Person), rel_3=(p1)-[:LIVES*]-(p3:Person) return rel_1,rel_2, rel_3 limit 20",
    "view": "graph"
  },
  {
    "name": "PLACE_POSITIVE_15DAYS",
    "displayName": "Contacts by place in 15 days",
    "description": "Track all the people who were in the same place of a positive in the last 15 days from his confirmation",
    "cypher": "match (p1:Person{Positive:true})-[v1:VISITS]->(pl:Place)<-[v2:VISITS]-(p2:Person)  where p1.Last_Confirm >= v1.Date and p1.Last_Confirm >= v2.Date and p1.Last_Confirm <= v1.Date + duration({days: 15}) and p1.Last_Confirm <= v2.Date + duration({days: 15}) return distinct p1.First_Name + \" \" + p1.Last_Name as Positive, p2.First_Name + \" \" + p2.Last_Name as Contacted, pl.First_Name as Place, p1.Last_Confirm, v1.Date as Positive_Visit, v2.Date as Contact_Visit limit 20",
    "view": "table"
  },
  {
    "name": "INDIRECT_CONTACTS",
    "displayName": "Indirect, risky contacts with no vaccine",
    "description": "Track all the people who were in contact, also indirectly, with a positive or with one of his contacts in the last 15 days of his confirmation. The possible infected are risky subjects and they don't have a vaccine",
    "cypher": "match p = (p1:Person{Positive:true})-[*]-(p2:Person) where all(r IN relationships(p) where (p1.Last_Confirm >= r.Date and p1.Last_Confirm <= r.Date + duration({days: 15}))) match (p2:Person)-[:HAS]->(m:Medical_Record{Risky_Subject:true}) where not (m)-[:REGISTERED]->(:Covid_Vaccines) return distinct p1.First_Name + \" \" + p1.Last_Name as Positive, p2.First_Name + \" \" + p2.Last_Name as Contacted, p1.Last_Confirm, p limit 20",
    "view": "graph"
  },

  {
    "name": "SHORTEST_PATH_2PEOPLE",
    "displayName": "Shortest path in 15 days",
    "description": "(VERY SLOW) Given two people, one positive and one negative, find the shortest path for which they could have been in contact in the last 15 days from the positive confirmation. The negative person has only one vaccine and he hasn't done a test in the last 2 days from the positive confirmation",
    "cypher": "match (p1:Person{Positive: true}), (p2:Person{Positive:false}), p = shortestPath((p1)-[*]-(p2)) where all(r IN relationships(p) where (p1.Last_Confirm >= r.Date and p1.Last_Confirm <= r.Date + duration({days: 15})))  match (p2)-[:HAS]->(m:Medical_Record), (m)-[:REGISTERED]->(t:Covid_Tests),  (m)-[r:REGISTERED]->(v:Covid_Vaccines) with p1, p2, max(t.Date) as Max_Date, count(v) as nv where (p1.Last_Confirm >= Max_Date and p1.Last_Confirm > Max_Date + duration({days: 2})) and nv=1 return distinct p1.First_Name + \" \" + p1.Last_Name as Positive, p2.First_Name + \" \" + p2.Last_Name as Negative, p1.Last_Confirm, Max_Date as Latest_Test limit 10",
    "view": "table"
  }
]
